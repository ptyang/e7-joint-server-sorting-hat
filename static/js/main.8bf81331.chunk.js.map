{"version":3,"sources":["components/guild-member/Guild-Member.js","components/guild-member-list/Guild-Member-List.js","components/guild/Guild.js","components/app/App.js","serviceWorker.js","index.js"],"names":["GuildMember","props","Name","GuildMemberList","GuildMembers","map","name","key","Guild","className","App","state","guildData","GuildData","guilds","onClick","randomizeGuilds","total","i","length","GetGuildAllMemberCount","this","guild","memberBucket","concat","arr","j","Math","floor","random","temp","ShuffleArray","guildCounter","push","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"23DAUeA,MARf,SAAqBC,GACjB,OACI,6BACI,4BAAKA,EAAMC,QCQRC,MAVf,SAAyBF,GACrB,OACI,6BACKA,EAAMG,aAAaC,KAAI,SAASC,GAC7B,OAAO,kBAAC,EAAD,CAAaC,IAAKD,EAAMJ,KAAMI,SCOtCE,MAVf,SAAeP,GACX,OACI,6BACI,wBAAIQ,UAAU,aAAd,eAAuCR,EAAMO,MAAM,eACnD,wBAAIC,UAAU,eAAd,iBAA2CR,EAAMO,MAAM,iBACvD,kBAAC,EAAD,CAAiBJ,aAAcH,EAAMO,MAAM,qB,OCiFxCE,M,YAnFb,WAAYT,GAAO,IAAD,8BAChB,4CAAMA,KACDU,MAAQ,CACXC,UAAWC,EAAUC,QAHP,E,sEAOR,IAAD,OACP,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAAlB,qCAIA,yBAAKA,UAAU,eACb,yBAAKA,UAAU,kBAAkBM,QAAS,kBAAM,EAAKC,gBAAgB,EAAKL,MAAMC,aAAhF,cA4DV,SAAgCE,GAE9B,IADA,IAAIG,EAAQ,EACJC,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IAChCD,GAASH,EAAOI,GAAG,iBAAiBC,OAEtC,OAAOF,EA9DCG,CAAuBC,KAAKV,MAAMC,WATtC,mBASmES,KAAKV,MAAMC,UAAUO,OATxF,WAWE,yBAAKV,UAAU,UAEXY,KAAKV,MAAMC,UAAUP,KAAI,SAASiB,GAChC,OAAO,kBAAC,EAAD,CAAOf,IAAKe,EAAM,cAAed,MAAOc,W,sCAO3CR,GAEd,IADA,IAAIS,EAAe,GACXL,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IAChCK,EAAeA,EAAaC,OAAOV,EAAOI,GAAG,kBAG/CK,EA6BJ,SAAsBE,GACpB,IAAK,IAAIP,EAAIO,EAAIN,OAAS,EAAGD,EAAI,EAAGA,IAAI,CACtC,IAAIQ,EAAIC,KAAKC,MAAMD,KAAKE,UAAYX,EAAI,IACpCY,EAAOL,EAAIP,GACfO,EAAIP,GAAKO,EAAIC,GACbD,EAAIC,GAAKI,EAEX,OAAOL,EApCUM,CAAaR,GAG5B,IAASL,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IACjCJ,EAAOI,GAAG,iBAAmB,GAI/B,IAAIc,EAAe,EACnB,IAASd,EAAI,EAAGA,EAAIK,EAAaJ,OAAQD,IACvCJ,EAAOkB,GAAc,iBAAiBC,KAAKV,EAAaL,MACxDc,GACoBlB,EAAOK,SACzBa,EAAe,GAKnB,IAASd,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IACjCJ,EAAOI,GAAG,gBAAkBJ,EAAOI,GAAG,iBAAiB,GAGzDG,KAAKa,SAAS,CACZtB,UAAWE,Q,GA7DCqB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8bf81331.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction GuildMember(props) {\r\n    return (\r\n        <div>\r\n            <h3>{props.Name}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuildMember","import React from \"react\"\r\nimport GuildMember from \"../guild-member/Guild-Member\"\r\n\r\nfunction GuildMemberList(props) {\r\n    return (\r\n        <div>\r\n            {props.GuildMembers.map(function(name) {\r\n                return <GuildMember key={name} Name={name}></GuildMember>;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuildMemberList","import React from \"react\"\r\nimport './Guild.css';\r\nimport GuildMemberList from \"../guild-member-list/Guild-Member-List\"\r\n\r\nfunction Guild(props) {\r\n    return (\r\n        <div>\r\n            <h2 className=\"GuildName\">Guild Name: {props.Guild[\"guild-name\"]}</h2>\r\n            <h2 className=\"GuildLeader\">Guild Leader: {props.Guild[\"guild-leader\"]}</h2>\r\n            <GuildMemberList GuildMembers={props.Guild[\"guild-members\"]}></GuildMemberList>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Guild","import React from 'react';\nimport './App.css';\nimport Guild from '../guild/Guild';\nimport GuildData from '../../data/guild-data';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = { \n      guildData: GuildData.guilds\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Joint Guild Community Sorting Hat \n        </header>\n        \n        <div className=\"MiddlePanel\">\n          <div className=\"RandomizeButton\" onClick={() => this.randomizeGuilds(this.state.guildData)}>Randomize</div>\n        </div>\n        \n        { GetGuildAllMemberCount(this.state.guildData) } members across {this.state.guildData.length} guilds.\n  \n        <div className=\"Guilds\">\n          {\n            this.state.guildData.map(function(guild){\n              return <Guild key={guild[\"guild-name\"]} Guild={guild}></Guild>\n          })}\n        </div>\n      </div>\n    );\n  }\n  \n  randomizeGuilds(guilds){\n    var memberBucket = [];\n    for(var i = 0; i < guilds.length; i++){\n      memberBucket = memberBucket.concat(guilds[i][\"guild-members\"]);\n    }\n\n    memberBucket = ShuffleArray(memberBucket);\n\n    // Clear out members\n    for (var i = 0; i < guilds.length; i++){\n      guilds[i][\"guild-members\"] = [];\n    }\n\n    // Deal out the members now that they are shuffled\n    var guildCounter = 0;\n    for (var i = 0; i < memberBucket.length; i++){\n      guilds[guildCounter][\"guild-members\"].push(memberBucket[i]);\n      guildCounter++;\n      if (guildCounter == guilds.length){\n        guildCounter = 0;\n      }\n    }\n\n    // Update guild leaders randomly\n    for (var i = 0; i < guilds.length; i++){\n      guilds[i][\"guild-leader\"] = guilds[i][\"guild-members\"][0];\n    }\n\n    this.setState({\n      guildData: guilds\n    })\n  }\n}\n\n\nfunction ShuffleArray(arr){\n  for (var i = arr.length - 1; i > 0; i--){\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  return arr;\n}\n\nfunction GetGuildAllMemberCount(guilds){\n  var total = 0;\n  for(var i = 0; i < guilds.length; i++){\n    total += guilds[i][\"guild-members\"].length;\n  }\n  return total;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}